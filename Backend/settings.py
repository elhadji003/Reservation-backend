"""
Django settings for Backend project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
import dotenv
import dj_database_url
import cloudinary
import dotenv
dotenv.load_dotenv()





# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-z1u)x_p#p4_-p=axq#u9ni-kg_cewf$&9#2ka)*560$jl50^at'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# DEBUG = os.getenv('DEBUG', 'True').lower() in ('true', '1', 't')
# DEBUG = os.getenv('DEBUG', 'False') == 'True'
SECRET_KEY = os.getenv('SECRET_KEY', '921910398dhdhfdjfwuieweundmdiw')




# === Cors ===
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "https://reservation-frontend-psi.vercel.app"
]

ALLOWED_HOSTS = ['*']



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Tiers
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt',
    'django_filters',
    'import_export',
    'cloudinary',
    'cloudinary_storage',

    # app
    'users',
    'reservation',
]

DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

cloudinary.config(
    cloud_name=os.getenv('CLOUDINARY_CLOUD_NAME', 'dfnmodvks'),
    api_key=os.getenv('CLOUDINARY_API_KEY', '458753634813941'),
    api_secret=os.getenv('CLOUDINARY_API_SECRET', 'Ofvbl75tk-mNedLGp4XHr4Ax77M'),
)

# === Google Calendar ===
GOOGLE_SERVICE_ACCOUNT_FILE = os.path.join(BASE_DIR, 'secrets', 'calendar-service.json')
GOOGLE_CALENDAR_ID = 'malickelhadji07@gmail.com'

# === Middleware ===

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]


# === REST Framwork
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,  # nombre d'éléments par page
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
    ],
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
}


ROOT_URLCONF = 'Backend.urls'
WSGI_APPLICATION = 'Backend.wsgi.application'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]



# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(default='sqlite:///db.sqlite3')
}


# === Model User ===
AUTH_USER_MODEL = 'users.User'

 

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# === Static & Media ===
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# === Measage EMail =====
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"  # Exemple Gmail
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = "malickelhadji07@gmail.com"
EMAIL_HOST_PASSWORD = "dbwl lzfj bvxe bhrs"  # Ne pas utiliser ton mot de passe normal
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER


<<<<<<< HEAD
import os
import tempfile
import json

# Récupère la variable d'environnement qui contient la clé JSON (avec \n échappés)
GOOGLE_SERVICE_ACCOUNT_JSON = os.getenv('GOOGLE_SERVICE_ACCOUNT_JSON')

GOOGLE_SERVICE_ACCOUNT_FILE = None

if GOOGLE_SERVICE_ACCOUNT_JSON:
    # Transforme la chaîne JSON en dictionnaire Python
    data = json.loads(GOOGLE_SERVICE_ACCOUNT_JSON)
    
    # Corrige la clé privée en remplaçant les séquences échappées '\\n' par de vrais retours à la ligne '\n'
    data['private_key'] = data['private_key'].replace('\\n', '\n')
    
    # Écris ce JSON corrigé dans un fichier temporaire
    temp_path = os.path.join(tempfile.gettempdir(), 'calendar-service.json')
    with open(temp_path, 'w') as f:
        json.dump(data, f, indent=2)
    
    GOOGLE_SERVICE_ACCOUNT_FILE = temp_path

# Maintenant tu peux utiliser GOOGLE_SERVICE_ACCOUNT_FILE dans ta config Google API
print("Chemin du fichier JSON Google Service Account :", GOOGLE_SERVICE_ACCOUNT_FILE)
=======
import json
import tempfile

GOOGLE_SERVICE_ACCOUNT_JSON = os.getenv('GOOGLE_SERVICE_ACCOUNT_JSON')

if GOOGLE_SERVICE_ACCOUNT_JSON:
    # Crée un fichier temporaire avec le contenu JSON
    temp_path = os.path.join(tempfile.gettempdir(), 'calendar-service.json')
    with open(temp_path, 'w') as f:
        f.write(GOOGLE_SERVICE_ACCOUNT_JSON)
    GOOGLE_SERVICE_ACCOUNT_FILE = temp_path
else:
    GOOGLE_SERVICE_ACCOUNT_FILE = None
>>>>>>> 970b80153bbd7499381cda282a789f868a4f7cdb
